#############################################################
###############   Flamingo standard library   ###############
#############################################################

### constants

(def [null] [])
(def [else] 1) # for when-else

### functions

# a helper function for defining functions.
(def [fn] ($ [params body] [
  def (first params) ($ (rest params) body)
]))

# pack arguments `args` to a list and call function `func` on it.
(fn [pack func @ args] [func args])

# unpack list `l` and call function `func` with its arguments.
(fn [unpack func l] [eval (attach [func] l)])

# return the first and second elements of list `l`.
(fn [st l] [eval (first l)])
(fn [nd l] [eval (first (rest l))])

# return the length (i.e. number of elements) of list `l`.
(fn [len l] [
  if (== l null)
    [0]
    [+ 1 (len (rest l))]
])

# reverse list `l`.
(fn [rev l] [
  if (== l null)
    [null]
    [attach (rev (rest l)) (first l)]
])

# reverse list `l` in-place.
(fn [rev-ip l] [
  if (== l null)
    [null]
    [def [l] (attach (rev (rest l)) (first l))]
])

# return the `n`-th element of list `l`.
(fn [nth n l] [
  if (not n)
    [st l]
    [nth (- n 1) (rest l)]
])

# apply function `func` on each element of list `l`.
(fn [map func l] [
  if (== l null)
    [null]
    [attach (list (func (st l))) (map func (rest l))]
])

# return a new list with only the elements of list `l`
# that passed the test implemented by function `func`.
(fn [filter func l] [
  if (== l null)
    [null]
    [attach (if (func (st l)) [first l] [null]) (filter func (rest l))]
])

(fn [range-recursive i n l] [
  if (> i n)
    [l]
    [attach (range-recursive (+ i 1) n l) (list (- (+ n 1) i))]
])

(fn [range from to] [
  if (< from to)
    [range-recursive from to []]
    [rev (range-recursive to from [])]
])

# evaluate expressions in `l` from left to right and return last one.
(fn [do @ l] [
  if (== l null) [null] [last l]
])

# create a new, more local scope.
(fn [let b] [(
  ($ [_] b) ()
)])

# when-else function.
(fn [when @ pairs] [
  if (== pairs [])
    [err 'nothing to `when` on']
    [if (st (st pairs))
      [nd (st pairs)]
      [unpack when (rest pairs)]]
])

# compare `x` to the first value of each pair and if equal, eval the second.
(fn [match x @ pairs] [
  if (== pairs null)
    [err 'no match was found']
    [if (== x (st (st (pairs))))
      [nd (st pairs)]
      [unpack match (attach (list x) (rest pairs))]]
])
