## constants

def [false] 0
def [true] (not false)
def [null] []

## functions

# a helper function for defining functions.
def [fn] ($ [params body] [
    def (first params) ($ (rest params) body)
])

# pack arguments `args` to a list and call `function` on it.
fn [pack function @ args] [function args]

# unpack list `lst` and call `function` with its arguments.
fn [unpack function lst] [eval (attach [function] lst)]

# return the length (i.e. number of elements) of list `lst`.
fn [len lst] [
    if (== lst null)
    [0]
    [+ 1 (len (rest lst))]
]

# evaluate expressions in `lst` from left to right and return last one
fn [do & lst] [
    if (== lst null) [null] [last lst]
]

# create a new, more local scope
fn [let b] [(
    ($ [_] b) ()
)]
